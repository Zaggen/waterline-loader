// Generated by CoffeeScript 1.9.3
(function() {
  var CWD, MySqlAdapter, Waterline, _, diskAdapter, loadedModels, memoryAdapter, orm, waterlineLoader;

  _ = require('lodash');

  Waterline = require('waterline');

  memoryAdapter = require('sails-memory');

  diskAdapter = require('sails-disk');

  MySqlAdapter = require('sails-mysql');

  orm = new Waterline();

  loadedModels = null;

  CWD = process.cwd();

  waterlineLoader = def.Module(function() {
    var config, defaultModel, namesHashMap;
    config = {
      adapters: {
        'default': memoryAdapter,
        'memory': memoryAdapter,
        'sails-disk': diskAdapter,
        'sails-mysql': MySqlAdapter
      },
      connections: {
        memory: {
          adapter: 'memory'
        },
        testMysqlServer: {
          adapter: 'sails-mysql',
          host: 'localhost',
          user: 'root',
          password: '',
          database: 'test_artnexus'
        },
        localDiskDb: {
          adapter: 'sails-disk'
        }
      },
      defaults: {
        migrate: 'drop'
      }
    };
    defaultModel = {
      connection: 'testMysqlServer'
    };
    namesHashMap = {};
    return this.init = function(models, done) {
      var _getOriginalName, _loadModelIntoCollection, _loadModels;
      _loadModels(models);
      orm.initialize(config, function(err, orm) {
        var lowerCaseName, model, ref;
        console.log('WaterlineLoader: Initializing ORM');
        if (err) {
          throw err;
        }
        loadedModels = orm.collections;
        ref = orm.collections;
        for (lowerCaseName in ref) {
          model = ref[lowerCaseName];
          if (lowerCaseName.indexOf('__') === -1) {
            global[_getOriginalName(lowerCaseName)] = model;
          }
        }
        return done();
      });
      this.teardown = function(done) {
        console.log('WaterlineLoader: tearing down...');
        return async(function() {
          var model, modelName;
          for (modelName in loadedModels) {
            model = loadedModels[modelName];
            await(model.destroy());
          }
          return orm.teardown(done);
        })();
      };
      _loadModels = function(models) {
        var i, len, model, modelDefinition;
        for (i = 0, len = models.length; i < len; i++) {
          model = models[i];
          modelDefinition = require(CWD + "/api/models/" + model.fileName);
          if (_.isFunction(modelDefinition)) {
            if (model.afterLoadFilter != null) {
              modelDefinition = model.afterLoadFilter(modelDefinition);
            } else {
              modelDefinition = modelDefinition();
            }
          }
          _loadModelIntoCollection({
            name: model.fileName,
            definition: modelDefinition
          });
        }
        return this;
      };
      _loadModelIntoCollection = function(model) {
        var waterlineCollection, waterlineModel;
        waterlineModel = _.defaults(model.definition, {
          identity: model.name,
          tableName: model.name
        }, defaultModel);
        waterlineCollection = Waterline.Collection.extend(waterlineModel);
        orm.loadCollection(waterlineCollection);
        return namesHashMap[model.name.toLowerCase()] = model.name;
      };
      return _getOriginalName = function(lowerCaseName) {
        return namesHashMap[lowerCaseName];
      };
    };
  });

  module.exports = waterlineLoader;

}).call(this);

//# sourceMappingURL=index.js.map
